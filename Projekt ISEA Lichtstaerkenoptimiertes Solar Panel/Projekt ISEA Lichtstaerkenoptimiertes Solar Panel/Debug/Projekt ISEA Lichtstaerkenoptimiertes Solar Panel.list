
Projekt ISEA Lichtstaerkenoptimiertes Solar Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b4c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000009b0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c0  200009c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   000177fe  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002979  00000000  00000000  00037881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014c8  00000000  00000000  0003a200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001073  00000000  00000000  0003b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026f7c  00000000  00000000  0003c73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018be9  00000000  00000000  000636b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1797  00000000  00000000  0007c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005adc  00000000  00000000  0016da38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ab  00000000  00000000  00173514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005ce0 	.word	0x08005ce0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08005ce0 	.word	0x08005ce0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_LCD_SendInternal>:
#define BUF 15




HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
 8000504:	4613      	mov	r3, r2
 8000506:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	e010      	b.n	8000530 <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6858      	ldr	r0, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b299      	uxth	r1, r3
 8000518:	23c8      	movs	r3, #200	; 0xc8
 800051a:	2201      	movs	r2, #1
 800051c:	f002 fd52 	bl	8002fc4 <HAL_I2C_IsDeviceReady>
 8000520:	4603      	mov	r3, r0
 8000522:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d006      	beq.n	8000538 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	3301      	adds	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	2b04      	cmp	r3, #4
 8000534:	ddeb      	ble.n	800050e <_LCD_SendInternal+0x16>
 8000536:	e000      	b.n	800053a <_LCD_SendInternal+0x42>
            break;
 8000538:	bf00      	nop
    }
    if(res!=HAL_OK) {
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <_LCD_SendInternal+0x4c>
    	return res;
 8000540:	7dfb      	ldrb	r3, [r7, #23]
 8000542:	e049      	b.n	80005d8 <_LCD_SendInternal+0xe0>
    }

    uint8_t up = data & 0xF0;
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	f023 030f 	bic.w	r3, r3, #15
 800054a:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7a1b      	ldrb	r3, [r3, #8]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <_LCD_SendInternal+0x66>
 800055a:	2308      	movs	r3, #8
 800055c:	e000      	b.n	8000560 <_LCD_SendInternal+0x68>
 800055e:	2300      	movs	r3, #0
 8000560:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8000562:	7bfa      	ldrb	r2, [r7, #15]
 8000564:	78bb      	ldrb	r3, [r7, #2]
 8000566:	4313      	orrs	r3, r2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	4313      	orrs	r3, r2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	b2db      	uxtb	r3, r3
 8000576:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8000578:	7bfa      	ldrb	r2, [r7, #15]
 800057a:	78bb      	ldrb	r3, [r7, #2]
 800057c:	4313      	orrs	r3, r2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	4313      	orrs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 8000588:	7bba      	ldrb	r2, [r7, #14]
 800058a:	78bb      	ldrb	r3, [r7, #2]
 800058c:	4313      	orrs	r3, r2
 800058e:	b2da      	uxtb	r2, r3
 8000590:	7b7b      	ldrb	r3, [r7, #13]
 8000592:	4313      	orrs	r3, r2
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 800059e:	7bba      	ldrb	r2, [r7, #14]
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	7b7b      	ldrb	r3, [r7, #13]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    strcpy((char*)BUF, "hi");
 80005ae:	230f      	movs	r3, #15
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <_LCD_SendInternal+0xe8>)
 80005b2:	8811      	ldrh	r1, [r2, #0]
 80005b4:	7892      	ldrb	r2, [r2, #2]
 80005b6:	8019      	strh	r1, [r3, #0]
 80005b8:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart3, BUF, strlen((char*)BUF), HAL_MAX_DELAY);
 80005ba:	200f      	movs	r0, #15
 80005bc:	f7ff fe16 	bl	80001ec <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	210f      	movs	r1, #15
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <_LCD_SendInternal+0xec>)
 80005cc:	f004 fce5 	bl	8004f9a <HAL_UART_Transmit>
    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 80005d0:	2005      	movs	r0, #5
 80005d2:	f001 f9ab 	bl	800192c <HAL_Delay>
    return res;
 80005d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	08005cf8 	.word	0x08005cf8
 80005e4:	2000002c 	.word	0x2000002c

080005e8 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	2200      	movs	r2, #0
 80005f8:	4619      	mov	r1, r3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff7c 	bl	80004f8 <_LCD_SendInternal>
 8000600:	4603      	mov	r3, r0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ff6b 	bl	80004f8 <_LCD_SendInternal>
 8000622:	4603      	mov	r3, r0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 8000636:	e00f      	b.n	8000658 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ffe3 	bl	800060a <_LCD_SendData>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <LCD_Print+0x26>
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	e007      	b.n	8000662 <LCD_Print+0x36>
        str++;
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1eb      	bne.n	8000638 <LCD_Print+0xc>
    }
    return HAL_OK;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <LCD_Test>:

HAL_StatusTypeDef LCD_Test(LCD_HandleTypeDef *dev) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
    // set address to 0x00
    status = _LCD_SendCommand(dev, 0b10000000);
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ffb6 	bl	80005e8 <_LCD_SendCommand>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <LCD_Test+0x1e>
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	e01c      	b.n	80006c4 <LCD_Test+0x58>
    status = LCD_Print(dev, "1602 LCD ready");
 800068a:	4910      	ldr	r1, [pc, #64]	; (80006cc <LCD_Test+0x60>)
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ffcd 	bl	800062c <LCD_Print>
 8000692:	4603      	mov	r3, r0
 8000694:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <LCD_Test+0x34>
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	e011      	b.n	80006c4 <LCD_Test+0x58>

    // set address to 0x40
    status = _LCD_SendCommand(dev, 0b11000000);
 80006a0:	21c0      	movs	r1, #192	; 0xc0
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ffa0 	bl	80005e8 <_LCD_SendCommand>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <LCD_Test+0x4a>
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	e006      	b.n	80006c4 <LCD_Test+0x58>
    status = LCD_Print(dev, " !!! ");
 80006b6:	4906      	ldr	r1, [pc, #24]	; (80006d0 <LCD_Test+0x64>)
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffb7 	bl	800062c <LCD_Print>
 80006be:	4603      	mov	r3, r0
 80006c0:	73fb      	strb	r3, [r7, #15]
    return status;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08005cfc 	.word	0x08005cfc
 80006d0:	08005d0c 	.word	0x08005d0c

080006d4 <LCD_Begin>:

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 80006e2:	2130      	movs	r1, #48	; 0x30
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff7f 	bl	80005e8 <_LCD_SendCommand>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <LCD_Begin+0x24>
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	e01c      	b.n	8000732 <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 80006f8:	2102      	movs	r1, #2
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ff74 	bl	80005e8 <_LCD_SendCommand>
 8000700:	4603      	mov	r3, r0
 8000702:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <LCD_Begin+0x3a>
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	e011      	b.n	8000732 <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 800070e:	210c      	movs	r1, #12
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff69 	bl	80005e8 <_LCD_SendCommand>
 8000716:	4603      	mov	r3, r0
 8000718:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <LCD_Begin+0x50>
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	e006      	b.n	8000732 <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 8000724:	2101      	movs	r1, #1
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff5e 	bl	80005e8 <_LCD_SendCommand>
 800072c:	4603      	mov	r3, r0
 800072e:	73fb      	strb	r3, [r7, #15]
    return status;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 800073a:	b580      	push	{r7, lr}
 800073c:	b084      	sub	sp, #16
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	70fb      	strb	r3, [r7, #3]
 8000746:	4613      	mov	r3, r2
 8000748:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d802      	bhi.n	8000756 <LCD_SetCursor+0x1c>
 8000750:	78bb      	ldrb	r3, [r7, #2]
 8000752:	2b0f      	cmp	r3, #15
 8000754:	d901      	bls.n	800075a <LCD_SetCursor+0x20>
		return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e010      	b.n	800077c <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d101      	bne.n	8000764 <LCD_SetCursor+0x2a>
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	e000      	b.n	8000766 <LCD_SetCursor+0x2c>
 8000764:	23c0      	movs	r3, #192	; 0xc0
 8000766:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 8000768:	7bfa      	ldrb	r2, [r7, #15]
 800076a:	78bb      	ldrb	r3, [r7, #2]
 800076c:	4413      	add	r3, r2
 800076e:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff37 	bl	80005e8 <_LCD_SendCommand>
 800077a:	4603      	mov	r3, r0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f001 f85d 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f923 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fc45 	bl	8001020 <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 fa7f 	bl	8000c98 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 fbe9 	bl	8000f70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 fc11 	bl	8000fc4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80007a2:	f000 f983 	bl	8000aac <MX_ADC1_Init>
  MX_ADC2_Init();
 80007a6:	f000 f9d3 	bl	8000b50 <MX_ADC2_Init>
  MX_TIM2_Init();
 80007aa:	f000 fb6b 	bl	8000e84 <MX_TIM2_Init>
  MX_I2C2_Init();
 80007ae:	f000 fac1 	bl	8000d34 <MX_I2C2_Init>
  MX_ADC3_Init();
 80007b2:	f000 fa1f 	bl	8000bf4 <MX_ADC3_Init>
  MX_TIM1_Init();
 80007b6:	f000 fafd 	bl	8000db4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Start PWM generation
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80007ba:	210c      	movs	r1, #12
 80007bc:	4877      	ldr	r0, [pc, #476]	; (800099c <main+0x218>)
 80007be:	f003 fcef 	bl	80041a0 <HAL_TIM_PWM_Start>

  //set initial servo to 90 degree
  pulseWidth = 1500;
 80007c2:	4b77      	ldr	r3, [pc, #476]	; (80009a0 <main+0x21c>)
 80007c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007c8:	601a      	str	r2, [r3, #0]
  while (1)
  {



	  HAL_TIM_Base_Start(&htim1);
 80007ca:	4876      	ldr	r0, [pc, #472]	; (80009a4 <main+0x220>)
 80007cc:	f003 fc00 	bl	8003fd0 <HAL_TIM_Base_Start>

	  // Set PWM pulse width
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulseWidth);
 80007d0:	4b72      	ldr	r3, [pc, #456]	; (800099c <main+0x218>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a72      	ldr	r2, [pc, #456]	; (80009a0 <main+0x21c>)
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40

	  // Read LDR1 ADC (left)
	  HAL_ADC_Start(&hadc1);
 80007da:	4873      	ldr	r0, [pc, #460]	; (80009a8 <main+0x224>)
 80007dc:	f001 f90e 	bl	80019fc <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 80007e0:	4972      	ldr	r1, [pc, #456]	; (80009ac <main+0x228>)
 80007e2:	4871      	ldr	r0, [pc, #452]	; (80009a8 <main+0x224>)
 80007e4:	f001 fa0f 	bl	8001c06 <HAL_ADC_PollForConversion>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d105      	bne.n	80007fa <main+0x76>
		  LDR_1_value = HAL_ADC_GetValue(&hadc1);
 80007ee:	486e      	ldr	r0, [pc, #440]	; (80009a8 <main+0x224>)
 80007f0:	f001 fa94 	bl	8001d1c <HAL_ADC_GetValue>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a6e      	ldr	r2, [pc, #440]	; (80009b0 <main+0x22c>)
 80007f8:	6013      	str	r3, [r2, #0]
	  }
	  HAL_ADC_Stop(&hadc1);
 80007fa:	486b      	ldr	r0, [pc, #428]	; (80009a8 <main+0x224>)
 80007fc:	f001 f9d0 	bl	8001ba0 <HAL_ADC_Stop>

	  // Read LDR2 ADC (right)
	  HAL_ADC_Start(&hadc2);
 8000800:	486c      	ldr	r0, [pc, #432]	; (80009b4 <main+0x230>)
 8000802:	f001 f8fb 	bl	80019fc <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc2, 1000000) == HAL_OK){
 8000806:	4969      	ldr	r1, [pc, #420]	; (80009ac <main+0x228>)
 8000808:	486a      	ldr	r0, [pc, #424]	; (80009b4 <main+0x230>)
 800080a:	f001 f9fc 	bl	8001c06 <HAL_ADC_PollForConversion>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d105      	bne.n	8000820 <main+0x9c>
		  LDR_2_value = HAL_ADC_GetValue(&hadc2);
 8000814:	4867      	ldr	r0, [pc, #412]	; (80009b4 <main+0x230>)
 8000816:	f001 fa81 	bl	8001d1c <HAL_ADC_GetValue>
 800081a:	4603      	mov	r3, r0
 800081c:	4a66      	ldr	r2, [pc, #408]	; (80009b8 <main+0x234>)
 800081e:	6013      	str	r3, [r2, #0]
	  }
	  HAL_ADC_Stop(&hadc2);
 8000820:	4864      	ldr	r0, [pc, #400]	; (80009b4 <main+0x230>)
 8000822:	f001 f9bd 	bl	8001ba0 <HAL_ADC_Stop>


	  //Sensor data comparison and case decision
	  //if(calcAbsDif(LDR_1_value, LDR_2_value) > 500){ // Fall 2: Inoptimal      irem verbesserungsversuche

	  if(abs(LDR_1_value - LDR_2_value) > 100){ // Fall 2: Inoptimal
 8000826:	4b62      	ldr	r3, [pc, #392]	; (80009b0 <main+0x22c>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b63      	ldr	r3, [pc, #396]	; (80009b8 <main+0x234>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	bfb8      	it	lt
 8000834:	425b      	neglt	r3, r3
 8000836:	2b64      	cmp	r3, #100	; 0x64
 8000838:	dd6e      	ble.n	8000918 <main+0x194>

		  if(LDR_1_value<LDR_2_value){	//light intensity at LDR1 is higher -> rotate CCW -> +=
 800083a:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <main+0x22c>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b5e      	ldr	r3, [pc, #376]	; (80009b8 <main+0x234>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	d234      	bcs.n	80008b0 <main+0x12c>

			  //signal motor to turn clockwise -> only Yellow LD1 is on
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	485c      	ldr	r0, [pc, #368]	; (80009bc <main+0x238>)
 800084c:	f002 fa5c 	bl	8002d08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	4859      	ldr	r0, [pc, #356]	; (80009bc <main+0x238>)
 8000856:	f002 fa57 	bl	8002d08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	4856      	ldr	r0, [pc, #344]	; (80009bc <main+0x238>)
 8000862:	f002 fa51 	bl	8002d08 <HAL_GPIO_WritePin>

			  //function to turn the motor One-Step CCW -> if PW not >= 2500, PW += 10
			  if( !(pulseWidth >= 2500) ){
 8000866:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <main+0x21c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800086e:	4293      	cmp	r3, r2
 8000870:	d809      	bhi.n	8000886 <main+0x102>
				  pulseWidth += 10;
 8000872:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <main+0x21c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	330a      	adds	r3, #10
 8000878:	4a49      	ldr	r2, [pc, #292]	; (80009a0 <main+0x21c>)
 800087a:	6013      	str	r3, [r2, #0]
				  HAL_Delay(500);
 800087c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000880:	f001 f854 	bl	800192c <HAL_Delay>
 8000884:	e05c      	b.n	8000940 <main+0x1bc>
			  } else {
				  //at maximum servo angle, turns all lights off and delay
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	484c      	ldr	r0, [pc, #304]	; (80009bc <main+0x238>)
 800088c:	f002 fa3c 	bl	8002d08 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	4849      	ldr	r0, [pc, #292]	; (80009bc <main+0x238>)
 8000898:	f002 fa36 	bl	8002d08 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4846      	ldr	r0, [pc, #280]	; (80009bc <main+0x238>)
 80008a2:	f002 fa31 	bl	8002d08 <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 80008a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008aa:	f001 f83f 	bl	800192c <HAL_Delay>
 80008ae:	e047      	b.n	8000940 <main+0x1bc>


		  } else {   //light intensity at LDR2 is higher -> rotate CW -> -=

			  //signal motor to turn counterclockwise -> Only Red LD3 is on
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b6:	4841      	ldr	r0, [pc, #260]	; (80009bc <main+0x238>)
 80008b8:	f002 fa26 	bl	8002d08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	483e      	ldr	r0, [pc, #248]	; (80009bc <main+0x238>)
 80008c2:	f002 fa21 	bl	8002d08 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2101      	movs	r1, #1
 80008ca:	483c      	ldr	r0, [pc, #240]	; (80009bc <main+0x238>)
 80008cc:	f002 fa1c 	bl	8002d08 <HAL_GPIO_WritePin>

			  //function to turn the motor One-Step clockwise -> if PW not <= 500, PW -= 10
			  if( !(pulseWidth <= 500) ){
 80008d0:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <main+0x21c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008d8:	d909      	bls.n	80008ee <main+0x16a>
				  pulseWidth -= 10;
 80008da:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <main+0x21c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	3b0a      	subs	r3, #10
 80008e0:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <main+0x21c>)
 80008e2:	6013      	str	r3, [r2, #0]
				  HAL_Delay(500);
 80008e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e8:	f001 f820 	bl	800192c <HAL_Delay>
 80008ec:	e028      	b.n	8000940 <main+0x1bc>
			  } else {
				  //at maximum servo angle, turns all lights off and delay
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	4832      	ldr	r0, [pc, #200]	; (80009bc <main+0x238>)
 80008f4:	f002 fa08 	bl	8002d08 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	482f      	ldr	r0, [pc, #188]	; (80009bc <main+0x238>)
 8000900:	f002 fa02 	bl	8002d08 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2101      	movs	r1, #1
 8000908:	482c      	ldr	r0, [pc, #176]	; (80009bc <main+0x238>)
 800090a:	f002 f9fd 	bl	8002d08 <HAL_GPIO_WritePin>
				  HAL_Delay(1000);
 800090e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000912:	f001 f80b 	bl	800192c <HAL_Delay>
 8000916:	e013      	b.n	8000940 <main+0x1bc>
		  }

	  } else {  //Fall 1: Optimal -> Light Intensity at both sensors are within tolerance value

		  //signal motor to stay put -> All LEDs are on
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	4827      	ldr	r0, [pc, #156]	; (80009bc <main+0x238>)
 800091e:	f002 f9f3 	bl	8002d08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4824      	ldr	r0, [pc, #144]	; (80009bc <main+0x238>)
 800092a:	f002 f9ed 	bl	8002d08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2101      	movs	r1, #1
 8000932:	4822      	ldr	r0, [pc, #136]	; (80009bc <main+0x238>)
 8000934:	f002 f9e8 	bl	8002d08 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f000 fff6 	bl	800192c <HAL_Delay>
	  }

	  // using adc to read Voltage
	  HAL_ADC_Start(&hadc3);
 8000940:	481f      	ldr	r0, [pc, #124]	; (80009c0 <main+0x23c>)
 8000942:	f001 f85b 	bl	80019fc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000946:	f04f 31ff 	mov.w	r1, #4294967295
 800094a:	481d      	ldr	r0, [pc, #116]	; (80009c0 <main+0x23c>)
 800094c:	f001 f95b 	bl	8001c06 <HAL_ADC_PollForConversion>
	  SP_value = HAL_ADC_GetValue(&hadc3);
 8000950:	481b      	ldr	r0, [pc, #108]	; (80009c0 <main+0x23c>)
 8000952:	f001 f9e3 	bl	8001d1c <HAL_ADC_GetValue>
 8000956:	4603      	mov	r3, r0
 8000958:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <main+0x240>)
 800095a:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc3);
 800095c:	4818      	ldr	r0, [pc, #96]	; (80009c0 <main+0x23c>)
 800095e:	f001 f91f 	bl	8001ba0 <HAL_ADC_Stop>

	  LCD_HandleTypeDef LCD = {LCD_DEFAULT_ADDR, &hi2c2, 1};
 8000962:	4a19      	ldr	r2, [pc, #100]	; (80009c8 <main+0x244>)
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	ca07      	ldmia	r2, {r0, r1, r2}
 8000968:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  LCD_Begin(&hi2c2);
 800096c:	4817      	ldr	r0, [pc, #92]	; (80009cc <main+0x248>)
 800096e:	f7ff feb1 	bl	80006d4 <LCD_Begin>

	  LCD_SetCursor(&hi2c2, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	4815      	ldr	r0, [pc, #84]	; (80009cc <main+0x248>)
 8000978:	f7ff fedf 	bl	800073a <LCD_SetCursor>

	  LCD_Test(&hi2c2);
 800097c:	4813      	ldr	r0, [pc, #76]	; (80009cc <main+0x248>)
 800097e:	f7ff fe75 	bl	800066c <LCD_Test>


	  HAL_TIM_Base_Stop(&htim1);
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <main+0x220>)
 8000984:	f003 fb8c 	bl	80040a0 <HAL_TIM_Base_Stop>
	  elapsedTime = __HAL_TIM_GET_COUNTER(&htim1)/1000;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <main+0x220>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <main+0x24c>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	099b      	lsrs	r3, r3, #6
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <main+0x250>)
 8000998:	6013      	str	r3, [r2, #0]
  {
 800099a:	e716      	b.n	80007ca <main+0x46>
 800099c:	20000450 	.word	0x20000450
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000408 	.word	0x20000408
 80009a8:	2000022c 	.word	0x2000022c
 80009ac:	000f4240 	.word	0x000f4240
 80009b0:	200009a4 	.word	0x200009a4
 80009b4:	20000274 	.word	0x20000274
 80009b8:	200009a8 	.word	0x200009a8
 80009bc:	40020400 	.word	0x40020400
 80009c0:	200002bc 	.word	0x200002bc
 80009c4:	200009ac 	.word	0x200009ac
 80009c8:	08005d14 	.word	0x08005d14
 80009cc:	200003b4 	.word	0x200003b4
 80009d0:	10624dd3 	.word	0x10624dd3
 80009d4:	200009b0 	.word	0x200009b0

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2230      	movs	r2, #48	; 0x30
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 f94e 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <SystemClock_Config+0xcc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a4c:	23a8      	movs	r3, #168	; 0xa8
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a54:	2307      	movs	r3, #7
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fdcf 	bl	8003600 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a68:	f000 fb96 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	2302      	movs	r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2105      	movs	r1, #5
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 f830 	bl	8003af0 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a96:	f000 fb7f 	bl	8001198 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	; 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <MX_ADC1_Init+0x9c>)
 8000ac2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <MX_ADC1_Init+0xa0>)
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000b0e:	f000 ff31 	bl	8001974 <HAL_ADC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 fb3e 	bl	8001198 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_ADC1_Init+0x98>)
 8000b2e:	f001 f903 	bl	8001d38 <HAL_ADC_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b38:	f000 fb2e 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000022c 	.word	0x2000022c
 8000b48:	40012000 	.word	0x40012000
 8000b4c:	0f000001 	.word	0x0f000001

08000b50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <MX_ADC2_Init+0x9c>)
 8000b66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b6e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <MX_ADC2_Init+0xa0>)
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000bb2:	f000 fedf 	bl	8001974 <HAL_ADC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f000 faec 	bl	8001198 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bc0:	230d      	movs	r3, #13
 8000bc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_ADC2_Init+0x98>)
 8000bd2:	f001 f8b1 	bl	8001d38 <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000bdc:	f000 fadc 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000274 	.word	0x20000274
 8000bec:	40012100 	.word	0x40012100
 8000bf0:	0f000001 	.word	0x0f000001

08000bf4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_ADC3_Init+0x9c>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <MX_ADC3_Init+0xa0>)
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c56:	f000 fe8d 	bl	8001974 <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c60:	f000 fa9a 	bl	8001198 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c64:	2309      	movs	r3, #9
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c76:	f001 f85f 	bl	8001d38 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c80:	f000 fa8a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200002bc 	.word	0x200002bc
 8000c90:	40012200 	.word	0x40012200
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_ETH_Init+0x84>)
 8000c9e:	4a20      	ldr	r2, [pc, #128]	; (8000d20 <MX_ETH_Init+0x88>)
 8000ca0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000cb0:	22e1      	movs	r2, #225	; 0xe1
 8000cb2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_ETH_Init+0x84>)
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <MX_ETH_Init+0x8c>)
 8000cca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_ETH_Init+0x84>)
 8000cce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cd2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_ETH_Init+0x84>)
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <MX_ETH_Init+0x90>)
 8000cd8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_ETH_Init+0x84>)
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_ETH_Init+0x94>)
 8000cde:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_ETH_Init+0x84>)
 8000ce2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ce6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_ETH_Init+0x84>)
 8000cea:	f001 fb39 	bl	8002360 <HAL_ETH_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f000 fa50 	bl	8001198 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cf8:	2238      	movs	r2, #56	; 0x38
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_ETH_Init+0x98>)
 8000cfe:	f004 ffc3 	bl	8005c88 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_ETH_Init+0x98>)
 8000d04:	2221      	movs	r2, #33	; 0x21
 8000d06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_ETH_Init+0x98>)
 8000d0a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_ETH_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000304 	.word	0x20000304
 8000d20:	40028000 	.word	0x40028000
 8000d24:	200009b4 	.word	0x200009b4
 8000d28:	2000018c 	.word	0x2000018c
 8000d2c:	200000ec 	.word	0x200000ec
 8000d30:	200000b4 	.word	0x200000b4

08000d34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <MX_I2C2_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <MX_I2C2_Init+0x7c>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d72:	f001 ffe3 	bl	8002d3c <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f000 fa0c 	bl	8001198 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d84:	f002 faa3 	bl	80032ce <HAL_I2CEx_ConfigAnalogFilter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000d8e:	f000 fa03 	bl	8001198 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_I2C2_Init+0x74>)
 8000d96:	f002 fad6 	bl	8003346 <HAL_I2CEx_ConfigDigitalFilter>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000da0:	f000 f9fa 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200003b4 	.word	0x200003b4
 8000dac:	40005800 	.word	0x40005800
 8000db0:	000186a0 	.word	0x000186a0

08000db4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0320 	add.w	r3, r7, #32
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <MX_TIM1_Init+0xcc>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0c:	481b      	ldr	r0, [pc, #108]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000e0e:	f003 f88f 	bl	8003f30 <HAL_TIM_Base_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000e18:	f000 f9be 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e20:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	4619      	mov	r1, r3
 8000e28:	4814      	ldr	r0, [pc, #80]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000e2a:	f003 fb43 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000e34:	f000 f9b0 	bl	8001198 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000e48:	f003 fbfb 	bl	8004642 <HAL_TIM_SlaveConfigSynchro>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000e52:	f000 f9a1 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_TIM1_Init+0xc8>)
 8000e64:	f003 ffd0 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e6e:	f000 f993 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3730      	adds	r7, #48	; 0x30
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000408 	.word	0x20000408
 8000e80:	40010000 	.word	0x40010000

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	; 0x38
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000ebe:	2253      	movs	r2, #83	; 0x53
 8000ec0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000eca:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ece:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000edc:	4823      	ldr	r0, [pc, #140]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000ede:	f003 f827 	bl	8003f30 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ee8:	f000 f956 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481c      	ldr	r0, [pc, #112]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000efa:	f003 fadb 	bl	80044b4 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f04:	f000 f948 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f08:	4818      	ldr	r0, [pc, #96]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000f0a:	f003 f8f0 	bl	80040ee <HAL_TIM_PWM_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f14:	f000 f940 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	4619      	mov	r1, r3
 8000f26:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000f28:	f003 ff6e 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f32:	f000 f931 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2360      	movs	r3, #96	; 0x60
 8000f38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000f3a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000f50:	f003 f9ee 	bl	8004330 <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f5a:	f000 f91d 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM2_Init+0xe8>)
 8000f60:	f000 fb32 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3738      	adds	r7, #56	; 0x38
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000450 	.word	0x20000450

08000f70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART3_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000fa8:	f003 ffaa 	bl	8004f00 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f8f1 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000070 	.word	0x20000070
 8000fc0:	40004800 	.word	0x40004800

08000fc4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	f002 f9dc 	bl	80033c4 <HAL_PCD_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 f8c1 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000498 	.word	0x20000498

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <MX_GPIO_Init+0x168>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <MX_GPIO_Init+0x168>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b50      	ldr	r3, [pc, #320]	; (8001188 <MX_GPIO_Init+0x168>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <MX_GPIO_Init+0x168>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <MX_GPIO_Init+0x168>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <MX_GPIO_Init+0x168>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <MX_GPIO_Init+0x168>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <MX_GPIO_Init+0x168>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b42      	ldr	r3, [pc, #264]	; (8001188 <MX_GPIO_Init+0x168>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <MX_GPIO_Init+0x168>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a3d      	ldr	r2, [pc, #244]	; (8001188 <MX_GPIO_Init+0x168>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <MX_GPIO_Init+0x168>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <MX_GPIO_Init+0x168>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a36      	ldr	r2, [pc, #216]	; (8001188 <MX_GPIO_Init+0x168>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <MX_GPIO_Init+0x168>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <MX_GPIO_Init+0x168>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <MX_GPIO_Init+0x168>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_GPIO_Init+0x168>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_GPIO_Init+0x168>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a28      	ldr	r2, [pc, #160]	; (8001188 <MX_GPIO_Init+0x168>)
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_GPIO_Init+0x168>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <MX_GPIO_Init+0x16c>)
 8001102:	f001 fe01 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2140      	movs	r1, #64	; 0x40
 800110a:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0x170>)
 800110c:	f001 fdfc 	bl	8002d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001116:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	481b      	ldr	r0, [pc, #108]	; (8001194 <MX_GPIO_Init+0x174>)
 8001128:	f001 fc42 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800112c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_GPIO_Init+0x16c>)
 8001146:	f001 fc33 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800114a:	2340      	movs	r3, #64	; 0x40
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0x170>)
 8001162:	f001 fc25 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_GPIO_Init+0x170>)
 800117a:	f001 fc19 	bl	80029b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400
 8001190:	40021800 	.word	0x40021800
 8001194:	40020800 	.word	0x40020800

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a45      	ldr	r2, [pc, #276]	; (8001328 <HAL_ADC_MspInit+0x134>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d128      	bne.n	8001268 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <HAL_ADC_MspInit+0x138>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a43      	ldr	r2, [pc, #268]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a3c      	ldr	r2, [pc, #240]	; (800132c <HAL_ADC_MspInit+0x138>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124e:	2301      	movs	r3, #1
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4833      	ldr	r0, [pc, #204]	; (8001330 <HAL_ADC_MspInit+0x13c>)
 8001262:	f001 fba5 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001266:	e05a      	b.n	800131e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_ADC_MspInit+0x140>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d128      	bne.n	80012c4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a2c      	ldr	r2, [pc, #176]	; (800132c <HAL_ADC_MspInit+0x138>)
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a25      	ldr	r2, [pc, #148]	; (800132c <HAL_ADC_MspInit+0x138>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012aa:	2308      	movs	r3, #8
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	481c      	ldr	r0, [pc, #112]	; (8001330 <HAL_ADC_MspInit+0x13c>)
 80012be:	f001 fb77 	bl	80029b0 <HAL_GPIO_Init>
}
 80012c2:	e02c      	b.n	800131e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_ADC_MspInit+0x144>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d127      	bne.n	800131e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_ADC_MspInit+0x138>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001306:	2308      	movs	r3, #8
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130a:	2303      	movs	r3, #3
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001316:	4619      	mov	r1, r3
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <HAL_ADC_MspInit+0x148>)
 800131a:	f001 fb49 	bl	80029b0 <HAL_GPIO_Init>
}
 800131e:	bf00      	nop
 8001320:	3738      	adds	r7, #56	; 0x38
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40012000 	.word	0x40012000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800
 8001334:	40012100 	.word	0x40012100
 8001338:	40012200 	.word	0x40012200
 800133c:	40021400 	.word	0x40021400

08001340 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_ETH_MspInit+0x174>)
 800135e:	4293      	cmp	r3, r2
 8001360:	f040 80a4 	bne.w	80014ac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 800136e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	623b      	str	r3, [r7, #32]
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 800138a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a36      	ldr	r2, [pc, #216]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_ETH_MspInit+0x178>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001428:	2332      	movs	r3, #50	; 0x32
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001438:	230b      	movs	r3, #11
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	481e      	ldr	r0, [pc, #120]	; (80014bc <HAL_ETH_MspInit+0x17c>)
 8001444:	f001 fab4 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001448:	2386      	movs	r3, #134	; 0x86
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001458:	230b      	movs	r3, #11
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <HAL_ETH_MspInit+0x180>)
 8001464:	f001 faa4 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147a:	230b      	movs	r3, #11
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <HAL_ETH_MspInit+0x184>)
 8001486:	f001 fa93 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800148a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800149c:	230b      	movs	r3, #11
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <HAL_ETH_MspInit+0x188>)
 80014a8:	f001 fa82 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40028000 	.word	0x40028000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40021800 	.word	0x40021800

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12b      	bne.n	8001546 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2303      	movs	r3, #3
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150e:	2312      	movs	r3, #18
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151a:	2304      	movs	r3, #4
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x8c>)
 8001526:	f001 fa43 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_I2C_MspInit+0x88>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40005800 	.word	0x40005800
 8001554:	40023800 	.word	0x40023800
 8001558:	40021400 	.word	0x40021400

0800155c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <HAL_TIM_Base_MspInit+0x64>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10e      	bne.n	800158c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800158a:	e012      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001594:	d10d      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_TIM_Base_MspInit+0x68>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d11d      	bne.n	8001626 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001606:	2308      	movs	r3, #8
 8001608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 8001622:	f001 f9c5 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_UART_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12c      	bne.n	80016b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x88>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_UART_MspInit+0x88>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_UART_MspInit+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a4:	2307      	movs	r3, #7
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <HAL_UART_MspInit+0x8c>)
 80016b0:	f001 f97e 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40004800 	.word	0x40004800
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020c00 	.word	0x40020c00

080016c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e8:	d13f      	bne.n	800176a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_PCD_MspInit+0xac>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_PCD_MspInit+0xac>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_PCD_MspInit+0xac>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001706:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001718:	230a      	movs	r3, #10
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4815      	ldr	r0, [pc, #84]	; (8001778 <HAL_PCD_MspInit+0xb0>)
 8001724:	f001 f944 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <HAL_PCD_MspInit+0xb0>)
 800173e:	f001 f937 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_PCD_MspInit+0xac>)
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_PCD_MspInit+0xac>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6353      	str	r3, [r2, #52]	; 0x34
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_PCD_MspInit+0xac>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_PCD_MspInit+0xac>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_PCD_MspInit+0xac>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 f890 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181e:	f7ff ffd7 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f004 fa39 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7fe ffad 	bl	8000784 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800182c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001838:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 800183c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001840:	200009c0 	.word	0x200009c0

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 fd41 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fc92 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fd4b 	bl	8002346 <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f000 fd21 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000004 	.word	0x20000004
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	2000000c 	.word	0x2000000c
 8001910:	200009bc 	.word	0x200009bc

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200009bc 	.word	0x200009bc

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c

08001974 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e033      	b.n	80019f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fc2e 	bl	80011f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fae8 	bl	8001f9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
 80019e2:	e001      	b.n	80019e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Start+0x1a>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0b2      	b.n	8001b7c <HAL_ADC_Start+0x180>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d018      	beq.n	8001a5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_ADC_Start+0x18c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_ADC_Start+0x190>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9a      	lsrs	r2, r3, #18
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d17a      	bne.n	8001b62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f023 0206 	bic.w	r2, r3, #6
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab8:	e002      	b.n	8001ac0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac8:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_ADC_Start+0x194>)
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ad4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d12a      	bne.n	8001b38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <HAL_ADC_Start+0x198>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d015      	beq.n	8001b18 <HAL_ADC_Start+0x11c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_ADC_Start+0x19c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d105      	bne.n	8001b02 <HAL_ADC_Start+0x106>
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <HAL_ADC_Start+0x194>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <HAL_ADC_Start+0x1a0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d136      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_ADC_Start+0x194>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d130      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d129      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	e020      	b.n	8001b7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_ADC_Start+0x198>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d11b      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d114      	bne.n	8001b7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	e00b      	b.n	8001b7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	40012300 	.word	0x40012300
 8001b94:	40012000 	.word	0x40012000
 8001b98:	40012100 	.word	0x40012100
 8001b9c:	40012200 	.word	0x40012200

08001ba0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Stop+0x16>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e021      	b.n	8001bfa <HAL_ADC_Stop+0x5a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d113      	bne.n	8001c4c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c32:	d10b      	bne.n	8001c4c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e063      	b.n	8001d14 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fe62 	bl	8001914 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c52:	e021      	b.n	8001c98 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5a:	d01d      	beq.n	8001c98 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_ADC_PollForConversion+0x6c>
 8001c62:	f7ff fe57 	bl	8001914 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d212      	bcs.n	8001c98 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d00b      	beq.n	8001c98 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e03d      	b.n	8001d14 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d1d6      	bne.n	8001c54 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0212 	mvn.w	r2, #18
 8001cae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d123      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11f      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d111      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1c>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e113      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x244>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b09      	cmp	r3, #9
 8001d62:	d925      	bls.n	8001db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68d9      	ldr	r1, [r3, #12]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	3b1e      	subs	r3, #30
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43da      	mvns	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	400a      	ands	r2, r1
 8001d88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68d9      	ldr	r1, [r3, #12]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4403      	add	r3, r0
 8001da2:	3b1e      	subs	r3, #30
 8001da4:	409a      	lsls	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	e022      	b.n	8001df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6919      	ldr	r1, [r3, #16]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4403      	add	r3, r0
 8001dec:	409a      	lsls	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d824      	bhi.n	8001e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b05      	subs	r3, #5
 8001e10:	221f      	movs	r2, #31
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b05      	subs	r3, #5
 8001e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
 8001e46:	e04c      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d824      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	3b23      	subs	r3, #35	; 0x23
 8001e62:	221f      	movs	r2, #31
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43da      	mvns	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	400a      	ands	r2, r1
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b23      	subs	r3, #35	; 0x23
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
 8001e98:	e023      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b41      	subs	r3, #65	; 0x41
 8001eac:	221f      	movs	r2, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b41      	subs	r3, #65	; 0x41
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_ADC_ConfigChannel+0x250>)
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_ADC_ConfigChannel+0x254>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d10f      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d8>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_ADC_ConfigChannel+0x254>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12b      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x23a>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_ADC_ConfigChannel+0x258>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d003      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x1f4>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b11      	cmp	r3, #17
 8001f2a:	d122      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_ADC_ConfigChannel+0x258>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d111      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_ADC_ConfigChannel+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_ADC_ConfigChannel+0x260>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9a      	lsrs	r2, r3, #18
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f9      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40012300 	.word	0x40012300
 8001f8c:	40012000 	.word	0x40012000
 8001f90:	10000012 	.word	0x10000012
 8001f94:	20000004 	.word	0x20000004
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa4:	4b79      	ldr	r3, [pc, #484]	; (800218c <ADC_Init+0x1f0>)
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	021a      	lsls	r2, r3, #8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <ADC_Init+0x1f4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d022      	beq.n	800207a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002042:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e00f      	b.n	800209a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0202 	bic.w	r2, r2, #2
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7e1b      	ldrb	r3, [r3, #24]
 80020b4:	005a      	lsls	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	3b01      	subs	r3, #1
 80020f4:	035a      	lsls	r2, r3, #13
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e007      	b.n	8002110 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	3b01      	subs	r3, #1
 800212c:	051a      	lsls	r2, r3, #20
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002152:	025a      	lsls	r2, r3, #9
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	029a      	lsls	r2, r3, #10
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40012300 	.word	0x40012300
 8002190:	0f000001 	.word	0x0f000001

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff47 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff5c 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffb0 	bl	80022b4 <SysTick_Config>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06c      	b.n	800244c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2223      	movs	r2, #35	; 0x23
 8002380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7fe ffdb 	bl	8001340 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_ETH_Init+0xf4>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a30      	ldr	r2, [pc, #192]	; (8002454 <HAL_ETH_Init+0xf4>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <HAL_ETH_Init+0xf4>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023a6:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_ETH_Init+0xf8>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <HAL_ETH_Init+0xf8>)
 80023ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_ETH_Init+0xf8>)
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4927      	ldr	r1, [pc, #156]	; (8002458 <HAL_ETH_Init+0xf8>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_ETH_Init+0xf8>)
 80023c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023dc:	f7ff fa9a 	bl	8001914 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023e2:	e011      	b.n	8002408 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023e4:	f7ff fa96 	bl	8001914 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023f2:	d909      	bls.n	8002408 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2204      	movs	r2, #4
 80023f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	22e0      	movs	r2, #224	; 0xe0
 8002400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e021      	b.n	800244c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e4      	bne.n	80023e4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f958 	bl	80026d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f9ff 	bl	8002824 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa55 	bl	80028d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	461a      	mov	r2, r3
 8002432:	2100      	movs	r1, #0
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f9bd 	bl	80027b4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2210      	movs	r2, #16
 8002446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800

0800245c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <ETH_SetMACConfig+0x15c>)
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7c1b      	ldrb	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <ETH_SetMACConfig+0x28>
 800247e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002482:	e000      	b.n	8002486 <ETH_SetMACConfig+0x2a>
 8002484:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	7c5b      	ldrb	r3, [r3, #17]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <ETH_SetMACConfig+0x38>
 800248e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002492:	e000      	b.n	8002496 <ETH_SetMACConfig+0x3a>
 8002494:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002496:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800249c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	7fdb      	ldrb	r3, [r3, #31]
 80024a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	7f92      	ldrb	r2, [r2, #30]
 80024b0:	2a00      	cmp	r2, #0
 80024b2:	d102      	bne.n	80024ba <ETH_SetMACConfig+0x5e>
 80024b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b8:	e000      	b.n	80024bc <ETH_SetMACConfig+0x60>
 80024ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80024bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7f1b      	ldrb	r3, [r3, #28]
 80024c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	791b      	ldrb	r3, [r3, #4]
 80024d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024da:	2a00      	cmp	r2, #0
 80024dc:	d102      	bne.n	80024e4 <ETH_SetMACConfig+0x88>
 80024de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e2:	e000      	b.n	80024e6 <ETH_SetMACConfig+0x8a>
 80024e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7bdb      	ldrb	r3, [r3, #15]
 80024ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024fe:	4313      	orrs	r3, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002516:	2001      	movs	r0, #1
 8002518:	f7ff fa08 	bl	800192c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002542:	2a00      	cmp	r2, #0
 8002544:	d101      	bne.n	800254a <ETH_SetMACConfig+0xee>
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	e000      	b.n	800254c <ETH_SetMACConfig+0xf0>
 800254a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800254c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002552:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800255a:	2a01      	cmp	r2, #1
 800255c:	d101      	bne.n	8002562 <ETH_SetMACConfig+0x106>
 800255e:	2208      	movs	r2, #8
 8002560:	e000      	b.n	8002564 <ETH_SetMACConfig+0x108>
 8002562:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002564:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800256c:	2a01      	cmp	r2, #1
 800256e:	d101      	bne.n	8002574 <ETH_SetMACConfig+0x118>
 8002570:	2204      	movs	r2, #4
 8002572:	e000      	b.n	8002576 <ETH_SetMACConfig+0x11a>
 8002574:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002576:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800257e:	2a01      	cmp	r2, #1
 8002580:	d101      	bne.n	8002586 <ETH_SetMACConfig+0x12a>
 8002582:	2202      	movs	r2, #2
 8002584:	e000      	b.n	8002588 <ETH_SetMACConfig+0x12c>
 8002586:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002588:	4313      	orrs	r3, r2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7ff f9c3 	bl	800192c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	ff20810f 	.word	0xff20810f

080025bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <ETH_SetDMAConfig+0x110>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	7b1b      	ldrb	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <ETH_SetDMAConfig+0x2c>
 80025e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025e6:	e000      	b.n	80025ea <ETH_SetDMAConfig+0x2e>
 80025e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7b5b      	ldrb	r3, [r3, #13]
 80025ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	7f52      	ldrb	r2, [r2, #29]
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d102      	bne.n	8002600 <ETH_SetDMAConfig+0x44>
 80025fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025fe:	e000      	b.n	8002602 <ETH_SetDMAConfig+0x46>
 8002600:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002602:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	7b9b      	ldrb	r3, [r3, #14]
 8002608:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800260a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002610:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	7f1b      	ldrb	r3, [r3, #28]
 8002616:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002618:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	7f9b      	ldrb	r3, [r3, #30]
 800261e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002620:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002626:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002630:	4313      	orrs	r3, r2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	461a      	mov	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff f96a 	bl	800192c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	791b      	ldrb	r3, [r3, #4]
 800266a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002670:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002676:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800267c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002684:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002686:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800268e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002694:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800269e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff f93b 	bl	800192c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	f8de3f23 	.word	0xf8de3f23

080026d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0a6      	sub	sp, #152	; 0x98
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800270c:	2300      	movs	r3, #0
 800270e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002716:	2300      	movs	r3, #0
 8002718:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002736:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800273c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002744:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fe86 	bl	800245c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002750:	2301      	movs	r3, #1
 8002752:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002754:	2301      	movs	r3, #1
 8002756:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800275e:	2301      	movs	r3, #1
 8002760:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002772:	2300      	movs	r3, #0
 8002774:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800277c:	2301      	movs	r3, #1
 800277e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002784:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800278a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800278c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002790:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002798:	2300      	movs	r3, #0
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff08 	bl	80025bc <ETH_SetDMAConfig>
}
 80027ac:	bf00      	nop
 80027ae:	3798      	adds	r7, #152	; 0x98
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3305      	adds	r3, #5
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	3204      	adds	r2, #4
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <ETH_MACAddressConfig+0x68>)
 80027d6:	4413      	add	r3, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3303      	adds	r3, #3
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	061a      	lsls	r2, r3, #24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3302      	adds	r3, #2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3301      	adds	r3, #1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4313      	orrs	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <ETH_MACAddressConfig+0x6c>)
 8002806:	4413      	add	r3, r2
 8002808:	461a      	mov	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40028040 	.word	0x40028040
 8002820:	40028044 	.word	0x40028044

08002824 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e03e      	b.n	80028b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	3206      	adds	r2, #6
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d80c      	bhi.n	8002894 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68d9      	ldr	r1, [r3, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	461a      	mov	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	e004      	b.n	800289e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d9bd      	bls.n	8002832 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c8:	611a      	str	r2, [r3, #16]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e046      	b.n	8002972 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6919      	ldr	r1, [r3, #16]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002920:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002928:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	3212      	adds	r2, #18
 800293e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d80c      	bhi.n	8002962 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6919      	ldr	r1, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	e004      	b.n	800296c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3301      	adds	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d9b5      	bls.n	80028e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a2:	60da      	str	r2, [r3, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e177      	b.n	8002cbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 8166 	bne.w	8002cb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d017      	beq.n	8002aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80c0 	beq.w	8002cb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a61      	ldr	r2, [pc, #388]	; (8002cd8 <HAL_GPIO_Init+0x328>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_GPIO_Init+0x32c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d037      	beq.n	8002bee <HAL_GPIO_Init+0x23e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a57      	ldr	r2, [pc, #348]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_GPIO_Init+0x23a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a56      	ldr	r2, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <HAL_GPIO_Init+0x236>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a55      	ldr	r2, [pc, #340]	; (8002ce8 <HAL_GPIO_Init+0x338>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x232>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x33c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x22e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a53      	ldr	r2, [pc, #332]	; (8002cf0 <HAL_GPIO_Init+0x340>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x22a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_GPIO_Init+0x344>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	; (8002cf8 <HAL_GPIO_Init+0x348>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	; (8002cfc <HAL_GPIO_Init+0x34c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x21a>
 8002bc6:	2309      	movs	r3, #9
 8002bc8:	e012      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bca:	230a      	movs	r3, #10
 8002bcc:	e010      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	e00e      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <HAL_GPIO_Init+0x328>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb0:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <HAL_GPIO_Init+0x354>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae84 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021400 	.word	0x40021400
 8002cf4:	40021800 	.word	0x40021800
 8002cf8:	40021c00 	.word	0x40021c00
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40022400 	.word	0x40022400
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
 8002d14:	4613      	mov	r3, r2
 8002d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d24:	e003      	b.n	8002d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d26:	887b      	ldrh	r3, [r7, #2]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	619a      	str	r2, [r3, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e12b      	b.n	8002fa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fbb2 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da0:	f001 f89e 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 8002da4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a81      	ldr	r2, [pc, #516]	; (8002fb0 <HAL_I2C_Init+0x274>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d807      	bhi.n	8002dc0 <HAL_I2C_Init+0x84>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a80      	ldr	r2, [pc, #512]	; (8002fb4 <HAL_I2C_Init+0x278>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bf94      	ite	ls
 8002db8:	2301      	movls	r3, #1
 8002dba:	2300      	movhi	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e006      	b.n	8002dce <HAL_I2C_Init+0x92>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a7d      	ldr	r2, [pc, #500]	; (8002fb8 <HAL_I2C_Init+0x27c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	bf94      	ite	ls
 8002dc8:	2301      	movls	r3, #1
 8002dca:	2300      	movhi	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0e7      	b.n	8002fa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a78      	ldr	r2, [pc, #480]	; (8002fbc <HAL_I2C_Init+0x280>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0c9b      	lsrs	r3, r3, #18
 8002de0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <HAL_I2C_Init+0x274>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d802      	bhi.n	8002e10 <HAL_I2C_Init+0xd4>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	e009      	b.n	8002e24 <HAL_I2C_Init+0xe8>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	4a69      	ldr	r2, [pc, #420]	; (8002fc0 <HAL_I2C_Init+0x284>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	3301      	adds	r3, #1
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	495c      	ldr	r1, [pc, #368]	; (8002fb0 <HAL_I2C_Init+0x274>)
 8002e40:	428b      	cmp	r3, r1
 8002e42:	d819      	bhi.n	8002e78 <HAL_I2C_Init+0x13c>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e59      	subs	r1, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e58:	400b      	ands	r3, r1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_I2C_Init+0x138>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1e59      	subs	r1, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e72:	e051      	b.n	8002f18 <HAL_I2C_Init+0x1dc>
 8002e74:	2304      	movs	r3, #4
 8002e76:	e04f      	b.n	8002f18 <HAL_I2C_Init+0x1dc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <HAL_I2C_Init+0x168>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	440b      	add	r3, r1
 8002e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e012      	b.n	8002eca <HAL_I2C_Init+0x18e>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e58      	subs	r0, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	0099      	lsls	r1, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Init+0x196>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e022      	b.n	8002f18 <HAL_I2C_Init+0x1dc>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_I2C_Init+0x1bc>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	1e58      	subs	r0, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6859      	ldr	r1, [r3, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	440b      	add	r3, r1
 8002ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eec:	3301      	adds	r3, #1
 8002eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef6:	e00f      	b.n	8002f18 <HAL_I2C_Init+0x1dc>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6809      	ldr	r1, [r1, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6911      	ldr	r1, [r2, #16]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68d2      	ldr	r2, [r2, #12]
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	000186a0 	.word	0x000186a0
 8002fb4:	001e847f 	.word	0x001e847f
 8002fb8:	003d08ff 	.word	0x003d08ff
 8002fbc:	431bde83 	.word	0x431bde83
 8002fc0:	10624dd3 	.word	0x10624dd3

08002fc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7fe fc9e 	bl	8001914 <HAL_GetTick>
 8002fd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	f040 8111 	bne.w	800320e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4988      	ldr	r1, [pc, #544]	; (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f912 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003002:	2302      	movs	r3, #2
 8003004:	e104      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_I2C_IsDeviceReady+0x50>
 8003010:	2302      	movs	r3, #2
 8003012:	e0fd      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d007      	beq.n	800303a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2224      	movs	r2, #36	; 0x24
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_I2C_IsDeviceReady+0x258>)
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800306c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2200      	movs	r2, #0
 8003076:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f8d0 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d103      	bne.n	800309e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0b6      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fc2f 	bl	8001914 <HAL_GetTick>
 80030b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030e6:	e025      	b.n	8003134 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e8:	f7fe fc14 	bl	8001914 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <HAL_I2C_IsDeviceReady+0x13a>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	22a0      	movs	r2, #160	; 0xa0
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2ba0      	cmp	r3, #160	; 0xa0
 800313e:	d005      	beq.n	800314c <HAL_I2C_IsDeviceReady+0x188>
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_I2C_IsDeviceReady+0x188>
 8003146:	7dbb      	ldrb	r3, [r7, #22]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0cd      	beq.n	80030e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d129      	bne.n	80031b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	4921      	ldr	r1, [pc, #132]	; (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f844 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e036      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e02c      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2319      	movs	r3, #25
 80031d6:	2201      	movs	r2, #1
 80031d8:	490f      	ldr	r1, [pc, #60]	; (8003218 <HAL_I2C_IsDeviceReady+0x254>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f820 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e012      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f4ff af32 	bcc.w	800305e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00100002 	.word	0x00100002
 800321c:	ffff0000 	.word	0xffff0000

08003220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	e025      	b.n	800327e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d021      	beq.n	800327e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fb6b 	bl	8001914 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e023      	b.n	80032c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10d      	bne.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	e00c      	b.n	80032be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d0b6      	beq.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d129      	bne.n	8003338 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0210 	bic.w	r2, r2, #16
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b20      	cmp	r3, #32
 800335e:	d12a      	bne.n	80033b6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2224      	movs	r2, #36	; 0x24
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	f023 030f 	bic.w	r3, r3, #15
 8003386:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	b29a      	uxth	r2, r3
 800338c:	89fb      	ldrh	r3, [r7, #14]
 800338e:	4313      	orrs	r3, r2
 8003390:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	89fa      	ldrh	r2, [r7, #14]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033c6:	b08f      	sub	sp, #60	; 0x3c
 80033c8:	af0a      	add	r7, sp, #40	; 0x28
 80033ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e10f      	b.n	80035f6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fe f969 	bl	80016c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2203      	movs	r2, #3
 80033fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f002 f996 	bl	8005746 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	687e      	ldr	r6, [r7, #4]
 8003422:	466d      	mov	r5, sp
 8003424:	f106 0410 	add.w	r4, r6, #16
 8003428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800342c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003434:	e885 0003 	stmia.w	r5, {r0, r1}
 8003438:	1d33      	adds	r3, r6, #4
 800343a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800343c:	6838      	ldr	r0, [r7, #0]
 800343e:	f002 f921 	bl	8005684 <USB_CoreInit>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0d0      	b.n	80035f6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f002 f984 	bl	8005768 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003460:	2300      	movs	r3, #0
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e04a      	b.n	80034fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	333d      	adds	r3, #61	; 0x3d
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	333c      	adds	r3, #60	; 0x3c
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	b298      	uxth	r0, r3
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3344      	adds	r3, #68	; 0x44
 80034a2:	4602      	mov	r2, r0
 80034a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3340      	adds	r3, #64	; 0x40
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034ba:	7bfa      	ldrb	r2, [r7, #15]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3348      	adds	r3, #72	; 0x48
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	334c      	adds	r3, #76	; 0x4c
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	3354      	adds	r3, #84	; 0x54
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	3301      	adds	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	d3af      	bcc.n	8003466 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	e044      	b.n	8003596 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	3301      	adds	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d3b5      	bcc.n	800350c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	687e      	ldr	r6, [r7, #4]
 80035a8:	466d      	mov	r5, sp
 80035aa:	f106 0410 	add.w	r4, r6, #16
 80035ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80035be:	1d33      	adds	r3, r6, #4
 80035c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c2:	6838      	ldr	r0, [r7, #0]
 80035c4:	f002 f91c 	bl	8005800 <USB_DevInit>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e00d      	b.n	80035f6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fae7 	bl	8005bc2 <USB_DevDisconnect>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e267      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d075      	beq.n	800370a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b04      	cmp	r3, #4
 8003628:	d00c      	beq.n	8003644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362a:	4b85      	ldr	r3, [pc, #532]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003632:	2b08      	cmp	r3, #8
 8003634:	d112      	bne.n	800365c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003636:	4b82      	ldr	r3, [pc, #520]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003642:	d10b      	bne.n	800365c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d05b      	beq.n	8003708 <HAL_RCC_OscConfig+0x108>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d157      	bne.n	8003708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e242      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d106      	bne.n	8003674 <HAL_RCC_OscConfig+0x74>
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e01d      	b.n	80036b0 <HAL_RCC_OscConfig+0xb0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x98>
 800367e:	4b70      	ldr	r3, [pc, #448]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6c      	ldr	r2, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0xb0>
 8003698:	4b69      	ldr	r3, [pc, #420]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a68      	ldr	r2, [pc, #416]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800369e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b66      	ldr	r3, [pc, #408]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f92c 	bl	8001914 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fe f928 	bl	8001914 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e207      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b5b      	ldr	r3, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0xc0>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe f918 	bl	8001914 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fe f914 	bl	8001914 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1f3      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	4b51      	ldr	r3, [pc, #324]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0xe8>
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d063      	beq.n	80037de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372a:	2b08      	cmp	r3, #8
 800372c:	d11c      	bne.n	8003768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d116      	bne.n	8003768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_RCC_OscConfig+0x152>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e1c7      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4937      	ldr	r1, [pc, #220]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	e03a      	b.n	80037de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x244>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe f8cd 	bl	8001914 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377e:	f7fe f8c9 	bl	8001914 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e1a8      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4925      	ldr	r1, [pc, #148]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]
 80037b0:	e015      	b.n	80037de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCC_OscConfig+0x244>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe f8ac 	bl	8001914 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fe f8a8 	bl	8001914 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e187      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d036      	beq.n	8003858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_RCC_OscConfig+0x248>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe f88c 	bl	8001914 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003800:	f7fe f888 	bl	8001914 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e167      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x240>)
 8003814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x200>
 800381e:	e01b      	b.n	8003858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x248>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003826:	f7fe f875 	bl	8001914 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	e00e      	b.n	800384c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382e:	f7fe f871 	bl	8001914 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d907      	bls.n	800384c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e150      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	42470000 	.word	0x42470000
 8003848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ea      	bne.n	800382e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8097 	beq.w	8003994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b81      	ldr	r3, [pc, #516]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10f      	bne.n	8003896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	4b7d      	ldr	r3, [pc, #500]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	4a7c      	ldr	r2, [pc, #496]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003884:	6413      	str	r3, [r2, #64]	; 0x40
 8003886:	4b7a      	ldr	r3, [pc, #488]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003896:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d118      	bne.n	80038d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a2:	4b74      	ldr	r3, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a73      	ldr	r2, [pc, #460]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 80038a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ae:	f7fe f831 	bl	8001914 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fe f82d 	bl	8001914 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e10c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <HAL_RCC_OscConfig+0x474>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x2ea>
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a63      	ldr	r2, [pc, #396]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	e01c      	b.n	8003924 <HAL_RCC_OscConfig+0x324>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x30c>
 80038f2:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a5e      	ldr	r2, [pc, #376]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	4b5c      	ldr	r3, [pc, #368]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a5b      	ldr	r2, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0x324>
 800390c:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	4b55      	ldr	r3, [pc, #340]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800391e:	f023 0304 	bic.w	r3, r3, #4
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d015      	beq.n	8003958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd fff2 	bl	8001914 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	e00a      	b.n	800394a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fd ffee 	bl	8001914 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003942:	4293      	cmp	r3, r2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e0cb      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394a:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0ee      	beq.n	8003934 <HAL_RCC_OscConfig+0x334>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fd ffdc 	bl	8001914 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395e:	e00a      	b.n	8003976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003960:	f7fd ffd8 	bl	8001914 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0b5      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1ee      	bne.n	8003960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003988:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a1 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800399e:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d05c      	beq.n	8003a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d141      	bne.n	8003a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_RCC_OscConfig+0x478>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd ffac 	bl	8001914 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd ffa8 	bl	8001914 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e087      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	019b      	lsls	r3, r3, #6
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	085b      	lsrs	r3, r3, #1
 80039f6:	3b01      	subs	r3, #1
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	491b      	ldr	r1, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_OscConfig+0x478>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fd ff81 	bl	8001914 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fd ff7d 	bl	8001914 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e05c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x416>
 8003a34:	e054      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x478>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fd ff6a 	bl	8001914 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fd ff66 	bl	8001914 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e045      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x470>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x444>
 8003a62:	e03d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e038      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000
 8003a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x4ec>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d028      	beq.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d121      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d11a      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d111      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800

08003af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0cc      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b04:	4b68      	ldr	r3, [pc, #416]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d90c      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b65      	ldr	r3, [pc, #404]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b8      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a52      	ldr	r2, [pc, #328]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	494d      	ldr	r1, [pc, #308]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d044      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d119      	bne.n	8003bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	4b3f      	ldr	r3, [pc, #252]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e06f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e067      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 0203 	bic.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4934      	ldr	r1, [pc, #208]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be0:	f7fd fe98 	bl	8001914 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be8:	f7fd fe94 	bl	8001914 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e04f      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 020c 	and.w	r2, r3, #12
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d1eb      	bne.n	8003be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c10:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d20c      	bcs.n	8003c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e032      	b.n	8003c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4916      	ldr	r1, [pc, #88]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	490e      	ldr	r1, [pc, #56]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c76:	f000 f821 	bl	8003cbc <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490a      	ldr	r1, [pc, #40]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fdf8 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023c00 	.word	0x40023c00
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	08005d20 	.word	0x08005d20
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	20000008 	.word	0x20000008

08003cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc0:	b094      	sub	sp, #80	; 0x50
 8003cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc8:	2300      	movs	r3, #0
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	2300      	movs	r3, #0
 8003cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd4:	4b79      	ldr	r3, [pc, #484]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d00d      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x40>
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	f200 80e1 	bhi.w	8003ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cee:	e0db      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf0:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cf4:	e0db      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf6:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfa:	e0d8      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cfc:	4b6f      	ldr	r3, [pc, #444]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d06:	4b6d      	ldr	r3, [pc, #436]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d063      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d12:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d2e:	4622      	mov	r2, r4
 8003d30:	462b      	mov	r3, r5
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	0159      	lsls	r1, r3, #5
 8003d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d40:	0150      	lsls	r0, r2, #5
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4621      	mov	r1, r4
 8003d48:	1a51      	subs	r1, r2, r1
 8003d4a:	6139      	str	r1, [r7, #16]
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d60:	4659      	mov	r1, fp
 8003d62:	018b      	lsls	r3, r1, #6
 8003d64:	4651      	mov	r1, sl
 8003d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	018a      	lsls	r2, r1, #6
 8003d6e:	4651      	mov	r1, sl
 8003d70:	ebb2 0801 	subs.w	r8, r2, r1
 8003d74:	4659      	mov	r1, fp
 8003d76:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8e:	4690      	mov	r8, r2
 8003d90:	4699      	mov	r9, r3
 8003d92:	4623      	mov	r3, r4
 8003d94:	eb18 0303 	adds.w	r3, r8, r3
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	eb49 0303 	adc.w	r3, r9, r3
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dae:	4629      	mov	r1, r5
 8003db0:	024b      	lsls	r3, r1, #9
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db8:	4621      	mov	r1, r4
 8003dba:	024a      	lsls	r2, r1, #9
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dcc:	f7fc fa16 	bl	80001fc <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e058      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	2200      	movs	r2, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	4611      	mov	r1, r2
 8003de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
 8003df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df4:	4642      	mov	r2, r8
 8003df6:	464b      	mov	r3, r9
 8003df8:	f04f 0000 	mov.w	r0, #0
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	0159      	lsls	r1, r3, #5
 8003e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e06:	0150      	lsls	r0, r2, #5
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e12:	4649      	mov	r1, r9
 8003e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e30:	eb63 050b 	sbc.w	r5, r3, fp
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	00eb      	lsls	r3, r5, #3
 8003e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e42:	00e2      	lsls	r2, r4, #3
 8003e44:	4614      	mov	r4, r2
 8003e46:	461d      	mov	r5, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	18e3      	adds	r3, r4, r3
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	464b      	mov	r3, r9
 8003e50:	eb45 0303 	adc.w	r3, r5, r3
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e62:	4629      	mov	r1, r5
 8003e64:	028b      	lsls	r3, r1, #10
 8003e66:	4621      	mov	r1, r4
 8003e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	028a      	lsls	r2, r1, #10
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e76:	2200      	movs	r2, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	61fa      	str	r2, [r7, #28]
 8003e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e80:	f7fc f9bc 	bl	80001fc <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3750      	adds	r7, #80	; 0x50
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	007a1200 	.word	0x007a1200

08003ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee4:	f7ff fff0 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40023800 	.word	0x40023800
 8003f04:	08005d30 	.word	0x08005d30

08003f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f0c:	f7ff ffdc 	bl	8003ec8 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0b5b      	lsrs	r3, r3, #13
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	08005d30 	.word	0x08005d30

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e041      	b.n	8003fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd fb00 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 fbaa 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d001      	beq.n	8003fe8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e046      	b.n	8004076 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	; (8004084 <HAL_TIM_Base_Start+0xb4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d01d      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_TIM_Base_Start+0xb8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_TIM_Base_Start+0xbc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_TIM_Base_Start+0xc0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_TIM_Base_Start+0xc4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_Base_Start+0xc8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_TIM_Base_Start+0x70>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_TIM_Base_Start+0xcc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d111      	bne.n	8004064 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b06      	cmp	r3, #6
 8004050:	d010      	beq.n	8004074 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004062:	e007      	b.n	8004074 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40010400 	.word	0x40010400
 8004098:	40014000 	.word	0x40014000
 800409c:	40001800 	.word	0x40001800

080040a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <HAL_TIM_Base_Stop+0x38>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6a1a      	ldr	r2, [r3, #32]
 80040be:	f240 4344 	movw	r3, #1092	; 0x444
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <HAL_TIM_Base_Stop+0x38>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e041      	b.n	8004184 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f839 	bl	800418c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f000 facb 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_TIM_PWM_Start+0x24>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e022      	b.n	800420a <HAL_TIM_PWM_Start+0x6a>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d109      	bne.n	80041de <HAL_TIM_PWM_Start+0x3e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	e015      	b.n	800420a <HAL_TIM_PWM_Start+0x6a>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d109      	bne.n	80041f8 <HAL_TIM_PWM_Start+0x58>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e008      	b.n	800420a <HAL_TIM_PWM_Start+0x6a>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07c      	b.n	800430c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0x82>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	e013      	b.n	800424a <HAL_TIM_PWM_Start+0xaa>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0x92>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	e00b      	b.n	800424a <HAL_TIM_PWM_Start+0xaa>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0xa2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004240:	e003      	b.n	800424a <HAL_TIM_PWM_Start+0xaa>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fdb3 	bl	8004dbe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <HAL_TIM_PWM_Start+0x174>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_PWM_Start+0xcc>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <HAL_TIM_PWM_Start+0x178>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_TIM_PWM_Start+0xd0>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <HAL_TIM_PWM_Start+0xd2>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_TIM_PWM_Start+0x174>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d01d      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1f      	ldr	r2, [pc, #124]	; (800431c <HAL_TIM_PWM_Start+0x17c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <HAL_TIM_PWM_Start+0x180>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_TIM_PWM_Start+0x184>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_TIM_PWM_Start+0x178>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_TIM_PWM_Start+0x188>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x136>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIM_PWM_Start+0x18c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d010      	beq.n	800430a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	e007      	b.n	800430a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010000 	.word	0x40010000
 8004318:	40010400 	.word	0x40010400
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40014000 	.word	0x40014000
 800432c:	40001800 	.word	0x40001800

08004330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800434a:	2302      	movs	r3, #2
 800434c:	e0ae      	b.n	80044ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	f200 809f 	bhi.w	800449c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004399 	.word	0x08004399
 8004368:	0800449d 	.word	0x0800449d
 800436c:	0800449d 	.word	0x0800449d
 8004370:	0800449d 	.word	0x0800449d
 8004374:	080043d9 	.word	0x080043d9
 8004378:	0800449d 	.word	0x0800449d
 800437c:	0800449d 	.word	0x0800449d
 8004380:	0800449d 	.word	0x0800449d
 8004384:	0800441b 	.word	0x0800441b
 8004388:	0800449d 	.word	0x0800449d
 800438c:	0800449d 	.word	0x0800449d
 8004390:	0800449d 	.word	0x0800449d
 8004394:	0800445b 	.word	0x0800445b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fa32 	bl	8004808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0208 	orr.w	r2, r2, #8
 80043b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0204 	bic.w	r2, r2, #4
 80043c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6999      	ldr	r1, [r3, #24]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	619a      	str	r2, [r3, #24]
      break;
 80043d6:	e064      	b.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa82 	bl	80048e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	619a      	str	r2, [r3, #24]
      break;
 8004418:	e043      	b.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fad7 	bl	80049d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0208 	orr.w	r2, r2, #8
 8004434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0204 	bic.w	r2, r2, #4
 8004444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	61da      	str	r2, [r3, #28]
      break;
 8004458:	e023      	b.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fb2b 	bl	8004abc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	021a      	lsls	r2, r3, #8
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	61da      	str	r2, [r3, #28]
      break;
 800449a:	e002      	b.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	75fb      	strb	r3, [r7, #23]
      break;
 80044a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIM_ConfigClockSource+0x1c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e0b4      	b.n	800463a <HAL_TIM_ConfigClockSource+0x186>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004508:	d03e      	beq.n	8004588 <HAL_TIM_ConfigClockSource+0xd4>
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800450e:	f200 8087 	bhi.w	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004516:	f000 8086 	beq.w	8004626 <HAL_TIM_ConfigClockSource+0x172>
 800451a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451e:	d87f      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b70      	cmp	r3, #112	; 0x70
 8004522:	d01a      	beq.n	800455a <HAL_TIM_ConfigClockSource+0xa6>
 8004524:	2b70      	cmp	r3, #112	; 0x70
 8004526:	d87b      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b60      	cmp	r3, #96	; 0x60
 800452a:	d050      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x11a>
 800452c:	2b60      	cmp	r3, #96	; 0x60
 800452e:	d877      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b50      	cmp	r3, #80	; 0x50
 8004532:	d03c      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0xfa>
 8004534:	2b50      	cmp	r3, #80	; 0x50
 8004536:	d873      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d058      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x13a>
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d86f      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b30      	cmp	r3, #48	; 0x30
 8004542:	d064      	beq.n	800460e <HAL_TIM_ConfigClockSource+0x15a>
 8004544:	2b30      	cmp	r3, #48	; 0x30
 8004546:	d86b      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b20      	cmp	r3, #32
 800454a:	d060      	beq.n	800460e <HAL_TIM_ConfigClockSource+0x15a>
 800454c:	2b20      	cmp	r3, #32
 800454e:	d867      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05c      	beq.n	800460e <HAL_TIM_ConfigClockSource+0x15a>
 8004554:	2b10      	cmp	r3, #16
 8004556:	d05a      	beq.n	800460e <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	e062      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6899      	ldr	r1, [r3, #8]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f000 fc08 	bl	8004d7e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800457c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	609a      	str	r2, [r3, #8]
      break;
 8004586:	e04f      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6899      	ldr	r1, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f000 fbf1 	bl	8004d7e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045aa:	609a      	str	r2, [r3, #8]
      break;
 80045ac:	e03c      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 fb65 	bl	8004c8a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2150      	movs	r1, #80	; 0x50
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fbbe 	bl	8004d48 <TIM_ITRx_SetConfig>
      break;
 80045cc:	e02c      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	461a      	mov	r2, r3
 80045dc:	f000 fb84 	bl	8004ce8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2160      	movs	r1, #96	; 0x60
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fbae 	bl	8004d48 <TIM_ITRx_SetConfig>
      break;
 80045ec:	e01c      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6859      	ldr	r1, [r3, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f000 fb45 	bl	8004c8a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2140      	movs	r1, #64	; 0x40
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb9e 	bl	8004d48 <TIM_ITRx_SetConfig>
      break;
 800460c:	e00c      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f000 fb95 	bl	8004d48 <TIM_ITRx_SetConfig>
      break;
 800461e:	e003      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      break;
 8004624:	e000      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004656:	2302      	movs	r3, #2
 8004658:	e031      	b.n	80046be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2202      	movs	r2, #2
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fa7b 	bl	8004b68 <TIM_SlaveTimer_SetConfig>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e018      	b.n	80046be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a40      	ldr	r2, [pc, #256]	; (80047dc <TIM_Base_SetConfig+0x114>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d00f      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a3d      	ldr	r2, [pc, #244]	; (80047e0 <TIM_Base_SetConfig+0x118>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a3c      	ldr	r2, [pc, #240]	; (80047e4 <TIM_Base_SetConfig+0x11c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a3b      	ldr	r2, [pc, #236]	; (80047e8 <TIM_Base_SetConfig+0x120>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3a      	ldr	r2, [pc, #232]	; (80047ec <TIM_Base_SetConfig+0x124>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <TIM_Base_SetConfig+0x114>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02b      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d027      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2c      	ldr	r2, [pc, #176]	; (80047e0 <TIM_Base_SetConfig+0x118>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d023      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <TIM_Base_SetConfig+0x11c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01f      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <TIM_Base_SetConfig+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01b      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a29      	ldr	r2, [pc, #164]	; (80047ec <TIM_Base_SetConfig+0x124>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d017      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <TIM_Base_SetConfig+0x128>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <TIM_Base_SetConfig+0x12c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <TIM_Base_SetConfig+0x130>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a25      	ldr	r2, [pc, #148]	; (80047fc <TIM_Base_SetConfig+0x134>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <TIM_Base_SetConfig+0x138>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a23      	ldr	r2, [pc, #140]	; (8004804 <TIM_Base_SetConfig+0x13c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <TIM_Base_SetConfig+0x114>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0xf8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <TIM_Base_SetConfig+0x124>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	615a      	str	r2, [r3, #20]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40010400 	.word	0x40010400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	40001800 	.word	0x40001800
 8004800:	40001c00 	.word	0x40001c00
 8004804:	40002000 	.word	0x40002000

08004808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f023 0302 	bic.w	r3, r3, #2
 8004850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <TIM_OC1_SetConfig+0xd8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_OC1_SetConfig+0x64>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <TIM_OC1_SetConfig+0xdc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10c      	bne.n	8004886 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0308 	bic.w	r3, r3, #8
 8004872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <TIM_OC1_SetConfig+0xd8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_OC1_SetConfig+0x8e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <TIM_OC1_SetConfig+0xdc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d111      	bne.n	80048ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40010400 	.word	0x40010400

080048e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0210 	bic.w	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0320 	bic.w	r3, r3, #32
 8004932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a22      	ldr	r2, [pc, #136]	; (80049cc <TIM_OC2_SetConfig+0xe4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_OC2_SetConfig+0x68>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <TIM_OC2_SetConfig+0xe8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10d      	bne.n	800496c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <TIM_OC2_SetConfig+0xe4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC2_SetConfig+0x94>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <TIM_OC2_SetConfig+0xe8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d113      	bne.n	80049a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400

080049d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a21      	ldr	r2, [pc, #132]	; (8004ab4 <TIM_OC3_SetConfig+0xe0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_OC3_SetConfig+0x66>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <TIM_OC3_SetConfig+0xe4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10d      	bne.n	8004a56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a16      	ldr	r2, [pc, #88]	; (8004ab4 <TIM_OC3_SetConfig+0xe0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC3_SetConfig+0x92>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <TIM_OC3_SetConfig+0xe4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d113      	bne.n	8004a8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400

08004abc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	031b      	lsls	r3, r3, #12
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <TIM_OC4_SetConfig+0xa4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC4_SetConfig+0x68>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <TIM_OC4_SetConfig+0xa8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d109      	bne.n	8004b38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	019b      	lsls	r3, r3, #6
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40010000 	.word	0x40010000
 8004b64:	40010400 	.word	0x40010400

08004b68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b70      	cmp	r3, #112	; 0x70
 8004bb0:	d01a      	beq.n	8004be8 <TIM_SlaveTimer_SetConfig+0x80>
 8004bb2:	2b70      	cmp	r3, #112	; 0x70
 8004bb4:	d860      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bb6:	2b60      	cmp	r3, #96	; 0x60
 8004bb8:	d054      	beq.n	8004c64 <TIM_SlaveTimer_SetConfig+0xfc>
 8004bba:	2b60      	cmp	r3, #96	; 0x60
 8004bbc:	d85c      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bbe:	2b50      	cmp	r3, #80	; 0x50
 8004bc0:	d046      	beq.n	8004c50 <TIM_SlaveTimer_SetConfig+0xe8>
 8004bc2:	2b50      	cmp	r3, #80	; 0x50
 8004bc4:	d858      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d019      	beq.n	8004bfe <TIM_SlaveTimer_SetConfig+0x96>
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d854      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bce:	2b30      	cmp	r3, #48	; 0x30
 8004bd0:	d055      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004bd2:	2b30      	cmp	r3, #48	; 0x30
 8004bd4:	d850      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d051      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d84c      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04d      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d04b      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004be6:	e047      	b.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68d9      	ldr	r1, [r3, #12]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f000 f8c1 	bl	8004d7e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004bfc:	e040      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d101      	bne.n	8004c0a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e03b      	b.n	8004c82 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c30:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
      break;
 8004c4e:	e017      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f000 f814 	bl	8004c8a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c62:	e00d      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f000 f839 	bl	8004ce8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c76:	e003      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7c:	e000      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004c7e:	bf00      	nop
  }

  return status;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f023 0201 	bic.w	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f023 030a 	bic.w	r3, r3, #10
 8004cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f023 0210 	bic.w	r2, r3, #16
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	031b      	lsls	r3, r3, #12
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f043 0307 	orr.w	r3, r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	609a      	str	r2, [r3, #8]
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	021a      	lsls	r2, r3, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	43db      	mvns	r3, r3
 8004de0:	401a      	ands	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1a      	ldr	r2, [r3, #32]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e05a      	b.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d01d      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40001800 	.word	0x40001800

08004f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e03f      	b.n	8004f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fc fb86 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2224      	movs	r2, #36	; 0x24
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f929 	bl	800519c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b08a      	sub	sp, #40	; 0x28
 8004f9e:	af02      	add	r7, sp, #8
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d17c      	bne.n	80050b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_UART_Transmit+0x2c>
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e075      	b.n	80050b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Transmit+0x3e>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e06e      	b.n	80050b6 <HAL_UART_Transmit+0x11c>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2221      	movs	r2, #33	; 0x21
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fee:	f7fc fc91 	bl	8001914 <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	88fa      	ldrh	r2, [r7, #6]
 8004ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d108      	bne.n	800501c <HAL_UART_Transmit+0x82>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e003      	b.n	8005024 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800502c:	e02a      	b.n	8005084 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f840 	bl	80050be <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e036      	b.n	80050b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3302      	adds	r3, #2
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e007      	b.n	8005076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	3301      	adds	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1cf      	bne.n	800502e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2140      	movs	r1, #64	; 0x40
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f810 	bl	80050be <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e006      	b.n	80050b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e000      	b.n	80050b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b090      	sub	sp, #64	; 0x40
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ce:	e050      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d04c      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0x30>
 80050de:	f7fc fc19 	bl	8001914 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d241      	bcs.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800510e:	637a      	str	r2, [r7, #52]	; 0x34
 8005110:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	613b      	str	r3, [r7, #16]
   return(result);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	63bb      	str	r3, [r7, #56]	; 0x38
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005142:	623a      	str	r2, [r7, #32]
 8005144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	69f9      	ldr	r1, [r7, #28]
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e00f      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d09f      	beq.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3740      	adds	r7, #64	; 0x40
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b0c0      	sub	sp, #256	; 0x100
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	68d9      	ldr	r1, [r3, #12]
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	ea40 0301 	orr.w	r3, r0, r1
 80051c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	431a      	orrs	r2, r3
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051f4:	f021 010c 	bic.w	r1, r1, #12
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005202:	430b      	orrs	r3, r1
 8005204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	6999      	ldr	r1, [r3, #24]
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	ea40 0301 	orr.w	r3, r0, r1
 8005222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b8f      	ldr	r3, [pc, #572]	; (8005468 <UART_SetConfig+0x2cc>)
 800522c:	429a      	cmp	r2, r3
 800522e:	d005      	beq.n	800523c <UART_SetConfig+0xa0>
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b8d      	ldr	r3, [pc, #564]	; (800546c <UART_SetConfig+0x2d0>)
 8005238:	429a      	cmp	r2, r3
 800523a:	d104      	bne.n	8005246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7fe fe64 	bl	8003f08 <HAL_RCC_GetPCLK2Freq>
 8005240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005244:	e003      	b.n	800524e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fe fe4b 	bl	8003ee0 <HAL_RCC_GetPCLK1Freq>
 800524a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005258:	f040 810c 	bne.w	8005474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800525c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005266:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800526a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800526e:	4622      	mov	r2, r4
 8005270:	462b      	mov	r3, r5
 8005272:	1891      	adds	r1, r2, r2
 8005274:	65b9      	str	r1, [r7, #88]	; 0x58
 8005276:	415b      	adcs	r3, r3
 8005278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800527a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800527e:	4621      	mov	r1, r4
 8005280:	eb12 0801 	adds.w	r8, r2, r1
 8005284:	4629      	mov	r1, r5
 8005286:	eb43 0901 	adc.w	r9, r3, r1
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800529a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800529e:	4690      	mov	r8, r2
 80052a0:	4699      	mov	r9, r3
 80052a2:	4623      	mov	r3, r4
 80052a4:	eb18 0303 	adds.w	r3, r8, r3
 80052a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052ac:	462b      	mov	r3, r5
 80052ae:	eb49 0303 	adc.w	r3, r9, r3
 80052b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ca:	460b      	mov	r3, r1
 80052cc:	18db      	adds	r3, r3, r3
 80052ce:	653b      	str	r3, [r7, #80]	; 0x50
 80052d0:	4613      	mov	r3, r2
 80052d2:	eb42 0303 	adc.w	r3, r2, r3
 80052d6:	657b      	str	r3, [r7, #84]	; 0x54
 80052d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052e0:	f7fa ff8c 	bl	80001fc <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4b61      	ldr	r3, [pc, #388]	; (8005470 <UART_SetConfig+0x2d4>)
 80052ea:	fba3 2302 	umull	r2, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	011c      	lsls	r4, r3, #4
 80052f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005304:	4642      	mov	r2, r8
 8005306:	464b      	mov	r3, r9
 8005308:	1891      	adds	r1, r2, r2
 800530a:	64b9      	str	r1, [r7, #72]	; 0x48
 800530c:	415b      	adcs	r3, r3
 800530e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005314:	4641      	mov	r1, r8
 8005316:	eb12 0a01 	adds.w	sl, r2, r1
 800531a:	4649      	mov	r1, r9
 800531c:	eb43 0b01 	adc.w	fp, r3, r1
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800532c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005334:	4692      	mov	sl, r2
 8005336:	469b      	mov	fp, r3
 8005338:	4643      	mov	r3, r8
 800533a:	eb1a 0303 	adds.w	r3, sl, r3
 800533e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005342:	464b      	mov	r3, r9
 8005344:	eb4b 0303 	adc.w	r3, fp, r3
 8005348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005358:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800535c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005360:	460b      	mov	r3, r1
 8005362:	18db      	adds	r3, r3, r3
 8005364:	643b      	str	r3, [r7, #64]	; 0x40
 8005366:	4613      	mov	r3, r2
 8005368:	eb42 0303 	adc.w	r3, r2, r3
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
 800536e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005376:	f7fa ff41 	bl	80001fc <__aeabi_uldivmod>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4611      	mov	r1, r2
 8005380:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <UART_SetConfig+0x2d4>)
 8005382:	fba3 2301 	umull	r2, r3, r3, r1
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2264      	movs	r2, #100	; 0x64
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	1acb      	subs	r3, r1, r3
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <UART_SetConfig+0x2d4>)
 8005398:	fba3 2302 	umull	r2, r3, r3, r2
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a4:	441c      	add	r4, r3
 80053a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	1891      	adds	r1, r2, r2
 80053be:	63b9      	str	r1, [r7, #56]	; 0x38
 80053c0:	415b      	adcs	r3, r3
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053c8:	4641      	mov	r1, r8
 80053ca:	1851      	adds	r1, r2, r1
 80053cc:	6339      	str	r1, [r7, #48]	; 0x30
 80053ce:	4649      	mov	r1, r9
 80053d0:	414b      	adcs	r3, r1
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053e0:	4659      	mov	r1, fp
 80053e2:	00cb      	lsls	r3, r1, #3
 80053e4:	4651      	mov	r1, sl
 80053e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ea:	4651      	mov	r1, sl
 80053ec:	00ca      	lsls	r2, r1, #3
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	4642      	mov	r2, r8
 80053f6:	189b      	adds	r3, r3, r2
 80053f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053fc:	464b      	mov	r3, r9
 80053fe:	460a      	mov	r2, r1
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800541c:	460b      	mov	r3, r1
 800541e:	18db      	adds	r3, r3, r3
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
 8005422:	4613      	mov	r3, r2
 8005424:	eb42 0303 	adc.w	r3, r2, r3
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800542e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005432:	f7fa fee3 	bl	80001fc <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <UART_SetConfig+0x2d4>)
 800543c:	fba3 1302 	umull	r1, r3, r3, r2
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	2164      	movs	r1, #100	; 0x64
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	3332      	adds	r3, #50	; 0x32
 800544e:	4a08      	ldr	r2, [pc, #32]	; (8005470 <UART_SetConfig+0x2d4>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	f003 0207 	and.w	r2, r3, #7
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4422      	add	r2, r4
 8005462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005464:	e106      	b.n	8005674 <UART_SetConfig+0x4d8>
 8005466:	bf00      	nop
 8005468:	40011000 	.word	0x40011000
 800546c:	40011400 	.word	0x40011400
 8005470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005478:	2200      	movs	r2, #0
 800547a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800547e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005486:	4642      	mov	r2, r8
 8005488:	464b      	mov	r3, r9
 800548a:	1891      	adds	r1, r2, r2
 800548c:	6239      	str	r1, [r7, #32]
 800548e:	415b      	adcs	r3, r3
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
 8005492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005496:	4641      	mov	r1, r8
 8005498:	1854      	adds	r4, r2, r1
 800549a:	4649      	mov	r1, r9
 800549c:	eb43 0501 	adc.w	r5, r3, r1
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	00eb      	lsls	r3, r5, #3
 80054aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ae:	00e2      	lsls	r2, r4, #3
 80054b0:	4614      	mov	r4, r2
 80054b2:	461d      	mov	r5, r3
 80054b4:	4643      	mov	r3, r8
 80054b6:	18e3      	adds	r3, r4, r3
 80054b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054bc:	464b      	mov	r3, r9
 80054be:	eb45 0303 	adc.w	r3, r5, r3
 80054c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054e2:	4629      	mov	r1, r5
 80054e4:	008b      	lsls	r3, r1, #2
 80054e6:	4621      	mov	r1, r4
 80054e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ec:	4621      	mov	r1, r4
 80054ee:	008a      	lsls	r2, r1, #2
 80054f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054f4:	f7fa fe82 	bl	80001fc <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4b60      	ldr	r3, [pc, #384]	; (8005680 <UART_SetConfig+0x4e4>)
 80054fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	011c      	lsls	r4, r3, #4
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	1891      	adds	r1, r2, r2
 800551e:	61b9      	str	r1, [r7, #24]
 8005520:	415b      	adcs	r3, r3
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005528:	4641      	mov	r1, r8
 800552a:	1851      	adds	r1, r2, r1
 800552c:	6139      	str	r1, [r7, #16]
 800552e:	4649      	mov	r1, r9
 8005530:	414b      	adcs	r3, r1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005540:	4659      	mov	r1, fp
 8005542:	00cb      	lsls	r3, r1, #3
 8005544:	4651      	mov	r1, sl
 8005546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800554a:	4651      	mov	r1, sl
 800554c:	00ca      	lsls	r2, r1, #3
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	4603      	mov	r3, r0
 8005554:	4642      	mov	r2, r8
 8005556:	189b      	adds	r3, r3, r2
 8005558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800555c:	464b      	mov	r3, r9
 800555e:	460a      	mov	r2, r1
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	67bb      	str	r3, [r7, #120]	; 0x78
 8005572:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005580:	4649      	mov	r1, r9
 8005582:	008b      	lsls	r3, r1, #2
 8005584:	4641      	mov	r1, r8
 8005586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558a:	4641      	mov	r1, r8
 800558c:	008a      	lsls	r2, r1, #2
 800558e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005592:	f7fa fe33 	bl	80001fc <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4611      	mov	r1, r2
 800559c:	4b38      	ldr	r3, [pc, #224]	; (8005680 <UART_SetConfig+0x4e4>)
 800559e:	fba3 2301 	umull	r2, r3, r3, r1
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2264      	movs	r2, #100	; 0x64
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	1acb      	subs	r3, r1, r3
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	3332      	adds	r3, #50	; 0x32
 80055b0:	4a33      	ldr	r2, [pc, #204]	; (8005680 <UART_SetConfig+0x4e4>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055bc:	441c      	add	r4, r3
 80055be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c2:	2200      	movs	r2, #0
 80055c4:	673b      	str	r3, [r7, #112]	; 0x70
 80055c6:	677a      	str	r2, [r7, #116]	; 0x74
 80055c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	1891      	adds	r1, r2, r2
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	415b      	adcs	r3, r3
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055dc:	4641      	mov	r1, r8
 80055de:	1851      	adds	r1, r2, r1
 80055e0:	6039      	str	r1, [r7, #0]
 80055e2:	4649      	mov	r1, r9
 80055e4:	414b      	adcs	r3, r1
 80055e6:	607b      	str	r3, [r7, #4]
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055f4:	4659      	mov	r1, fp
 80055f6:	00cb      	lsls	r3, r1, #3
 80055f8:	4651      	mov	r1, sl
 80055fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055fe:	4651      	mov	r1, sl
 8005600:	00ca      	lsls	r2, r1, #3
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	4603      	mov	r3, r0
 8005608:	4642      	mov	r2, r8
 800560a:	189b      	adds	r3, r3, r2
 800560c:	66bb      	str	r3, [r7, #104]	; 0x68
 800560e:	464b      	mov	r3, r9
 8005610:	460a      	mov	r2, r1
 8005612:	eb42 0303 	adc.w	r3, r2, r3
 8005616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	663b      	str	r3, [r7, #96]	; 0x60
 8005622:	667a      	str	r2, [r7, #100]	; 0x64
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005630:	4649      	mov	r1, r9
 8005632:	008b      	lsls	r3, r1, #2
 8005634:	4641      	mov	r1, r8
 8005636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800563a:	4641      	mov	r1, r8
 800563c:	008a      	lsls	r2, r1, #2
 800563e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005642:	f7fa fddb 	bl	80001fc <__aeabi_uldivmod>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <UART_SetConfig+0x4e4>)
 800564c:	fba3 1302 	umull	r1, r3, r3, r2
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	2164      	movs	r1, #100	; 0x64
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	3332      	adds	r3, #50	; 0x32
 800565e:	4a08      	ldr	r2, [pc, #32]	; (8005680 <UART_SetConfig+0x4e4>)
 8005660:	fba2 2303 	umull	r2, r3, r2, r3
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	f003 020f 	and.w	r2, r3, #15
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4422      	add	r2, r4
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800567a:	46bd      	mov	sp, r7
 800567c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005680:	51eb851f 	.word	0x51eb851f

08005684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005684:	b084      	sub	sp, #16
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	f107 001c 	add.w	r0, r7, #28
 8005692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b01      	cmp	r3, #1
 800569a:	d122      	bne.n	80056e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 faa2 	bl	8005c20 <USB_CoreReset>
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]
 80056e0:	e01a      	b.n	8005718 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa96 	bl	8005c20 <USB_CoreReset>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
 800570a:	e005      	b.n	8005718 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	2b01      	cmp	r3, #1
 800571c:	d10b      	bne.n	8005736 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f043 0206 	orr.w	r2, r3, #6
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f043 0220 	orr.w	r2, r3, #32
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005742:	b004      	add	sp, #16
 8005744:	4770      	bx	lr

08005746 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0201 	bic.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d115      	bne.n	80057b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005796:	2001      	movs	r0, #1
 8005798:	f7fc f8c8 	bl	800192c <HAL_Delay>
      ms++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa2e 	bl	8005c04 <USB_GetMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d01e      	beq.n	80057ec <USB_SetCurrentMode+0x84>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b31      	cmp	r3, #49	; 0x31
 80057b2:	d9f0      	bls.n	8005796 <USB_SetCurrentMode+0x2e>
 80057b4:	e01a      	b.n	80057ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d115      	bne.n	80057e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fc f8af 	bl	800192c <HAL_Delay>
      ms++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa15 	bl	8005c04 <USB_GetMode>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <USB_SetCurrentMode+0x84>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b31      	cmp	r3, #49	; 0x31
 80057e4:	d9f0      	bls.n	80057c8 <USB_SetCurrentMode+0x60>
 80057e6:	e001      	b.n	80057ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e005      	b.n	80057f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b32      	cmp	r3, #50	; 0x32
 80057f0:	d101      	bne.n	80057f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005800:	b084      	sub	sp, #16
 8005802:	b580      	push	{r7, lr}
 8005804:	b086      	sub	sp, #24
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800580e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	e009      	b.n	8005834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	3340      	adds	r3, #64	; 0x40
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	2200      	movs	r2, #0
 800582c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3301      	adds	r3, #1
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b0e      	cmp	r3, #14
 8005838:	d9f2      	bls.n	8005820 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800583a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11c      	bne.n	800587a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584e:	f043 0302 	orr.w	r3, r3, #2
 8005852:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
 8005878:	e00b      	b.n	8005892 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	4619      	mov	r1, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	461a      	mov	r2, r3
 80058ae:	680b      	ldr	r3, [r1, #0]
 80058b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10c      	bne.n	80058d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058be:	2100      	movs	r1, #0
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f965 	bl	8005b90 <USB_SetDevSpeed>
 80058c6:	e008      	b.n	80058da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058c8:	2101      	movs	r1, #1
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f960 	bl	8005b90 <USB_SetDevSpeed>
 80058d0:	e003      	b.n	80058da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058d2:	2103      	movs	r1, #3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f95b 	bl	8005b90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058da:	2110      	movs	r1, #16
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8f3 	bl	8005ac8 <USB_FlushTxFifo>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f91f 	bl	8005b30 <USB_FlushRxFifo>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	461a      	mov	r2, r3
 8005910:	2300      	movs	r3, #0
 8005912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	461a      	mov	r2, r3
 800591c:	2300      	movs	r3, #0
 800591e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	e043      	b.n	80059ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593c:	d118      	bne.n	8005970 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	461a      	mov	r2, r3
 8005952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e013      	b.n	8005982 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	461a      	mov	r2, r3
 8005968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e008      	b.n	8005982 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	461a      	mov	r2, r3
 800597e:	2300      	movs	r3, #0
 8005980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598e:	461a      	mov	r2, r3
 8005990:	2300      	movs	r3, #0
 8005992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	461a      	mov	r2, r3
 80059a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	3301      	adds	r3, #1
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3b7      	bcc.n	8005926 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e043      	b.n	8005a44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d2:	d118      	bne.n	8005a06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	461a      	mov	r2, r3
 80059e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e013      	b.n	8005a18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	461a      	mov	r2, r3
 80059fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e008      	b.n	8005a18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	461a      	mov	r2, r3
 8005a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3301      	adds	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3b7      	bcc.n	80059bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f043 0210 	orr.w	r2, r3, #16
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <USB_DevInit+0x2c4>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f043 0208 	orr.w	r2, r3, #8
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ac0:	b004      	add	sp, #16
 8005ac2:	4770      	bx	lr
 8005ac4:	803c3800 	.word	0x803c3800

08005ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <USB_FlushTxFifo+0x64>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d901      	bls.n	8005ae8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e01b      	b.n	8005b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	daf2      	bge.n	8005ad6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	019b      	lsls	r3, r3, #6
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <USB_FlushTxFifo+0x64>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e006      	b.n	8005b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d0f0      	beq.n	8005b00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	00030d40 	.word	0x00030d40

08005b30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <USB_FlushRxFifo+0x5c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e018      	b.n	8005b80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	daf2      	bge.n	8005b3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <USB_FlushRxFifo+0x5c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e006      	b.n	8005b80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d0f0      	beq.n	8005b60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	00030d40 	.word	0x00030d40

08005b90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bdc:	f023 0303 	bic.w	r3, r3, #3
 8005be0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0301 	and.w	r3, r3, #1
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <USB_CoreReset+0x64>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e01b      	b.n	8005c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	daf2      	bge.n	8005c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <USB_CoreReset+0x64>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e006      	b.n	8005c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d0f0      	beq.n	8005c56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	00030d40 	.word	0x00030d40

08005c88 <memset>:
 8005c88:	4402      	add	r2, r0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	; (8005cd0 <__libc_init_array+0x38>)
 8005c9c:	4c0d      	ldr	r4, [pc, #52]	; (8005cd4 <__libc_init_array+0x3c>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	4d0b      	ldr	r5, [pc, #44]	; (8005cd8 <__libc_init_array+0x40>)
 8005caa:	4c0c      	ldr	r4, [pc, #48]	; (8005cdc <__libc_init_array+0x44>)
 8005cac:	f000 f818 	bl	8005ce0 <_init>
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08005d40 	.word	0x08005d40
 8005cd4:	08005d40 	.word	0x08005d40
 8005cd8:	08005d40 	.word	0x08005d40
 8005cdc:	08005d44 	.word	0x08005d44

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
